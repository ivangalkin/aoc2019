#include <iostream>
#include <vector>
#include <array>
#include <set>
#include <map>
#include <tuple>

#ifdef NDEBUG
#undef NDEBUG
#endif

#include <assert.h>
#include <algorithm>

#define ASSERT_EQ(a, b) \
   { __typeof__ (a) _a = (a); \
       __typeof__ (b) _b = (b); \
     if (a != b)       \
     {                 \
       std::cout << a << " != " << b << std::endl; \
       assert(0);                  \
     }                  \
     }

namespace {

    std::vector<int64_t> input_day_9 = {1102, 34463338, 34463338, 63, 1007, 63, 34463338, 63, 1005, 63, 53, 1102, 3, 1,
                                        1000, 109, 988, 209, 12, 9, 1000, 209, 6, 209, 3, 203, 0, 1008, 1000, 1, 63,
                                        1005, 63, 65, 1008, 1000, 2, 63, 1005, 63, 904, 1008, 1000, 0, 63, 1005, 63, 58,
                                        4, 25, 104, 0, 99, 4, 0, 104, 0, 99, 4, 17, 104, 0, 99, 0, 0, 1102, 521, 1,
                                        1028, 1101, 0, 36, 1000, 1102, 30, 1, 1005, 1101, 21, 0, 1013, 1101, 26, 0,
                                        1006, 1102, 31, 1, 1017, 1101, 24, 0, 1007, 1101, 0, 1, 1021, 1102, 27, 1, 1019,
                                        1101, 23, 0, 1010, 1101, 0, 38, 1012, 1102, 35, 1, 1001, 1101, 25, 0, 1003,
                                        1102, 20, 1, 1004, 1101, 0, 37, 1009, 1101, 424, 0, 1023, 1102, 39, 1, 1008,
                                        1102, 406, 1, 1027, 1102, 1, 413, 1026, 1101, 0, 29, 1002, 1102, 1, 0, 1020,
                                        1102, 34, 1, 1014, 1102, 1, 28, 1018, 1102, 1, 33, 1011, 1102, 300, 1, 1025,
                                        1102, 1, 22, 1015, 1102, 305, 1, 1024, 1101, 32, 0, 1016, 1102, 427, 1, 1022,
                                        1101, 512, 0, 1029, 109, 14, 1205, 6, 197, 1001, 64, 1, 64, 1106, 0, 199, 4,
                                        187, 1002, 64, 2, 64, 109, -18, 1207, 8, 19, 63, 1005, 63, 215, 1105, 1, 221, 4,
                                        205, 1001, 64, 1, 64, 1002, 64, 2, 64, 109, 10, 1208, -1, 28, 63, 1005, 63, 237,
                                        1106, 0, 243, 4, 227, 1001, 64, 1, 64, 1002, 64, 2, 64, 109, -2, 2102, 1, 0, 63,
                                        1008, 63, 22, 63, 1005, 63, 263, 1105, 1, 269, 4, 249, 1001, 64, 1, 64, 1002,
                                        64, 2, 64, 109, 11, 21107, 40, 39, 0, 1005, 1015, 289, 1001, 64, 1, 64, 1106, 0,
                                        291, 4, 275, 1002, 64, 2, 64, 109, 9, 2105, 1, 0, 4, 297, 1105, 1, 309, 1001,
                                        64, 1, 64, 1002, 64, 2, 64, 109, -13, 2101, 0, -5, 63, 1008, 63, 25, 63, 1005,
                                        63, 329, 1105, 1, 335, 4, 315, 1001, 64, 1, 64, 1002, 64, 2, 64, 109, 1, 1206,
                                        8, 353, 4, 341, 1001, 64, 1, 64, 1105, 1, 353, 1002, 64, 2, 64, 109, 3, 2108,
                                        37, -6, 63, 1005, 63, 375, 4, 359, 1001, 64, 1, 64, 1106, 0, 375, 1002, 64, 2,
                                        64, 109, -16, 1207, 2, 36, 63, 1005, 63, 397, 4, 381, 1001, 64, 1, 64, 1105, 1,
                                        397, 1002, 64, 2, 64, 109, 28, 2106, 0, 0, 1001, 64, 1, 64, 1106, 0, 415, 4,
                                        403, 1002, 64, 2, 64, 109, -3, 2105, 1, -1, 1106, 0, 433, 4, 421, 1001, 64, 1,
                                        64, 1002, 64, 2, 64, 109, -12, 2108, 25, -6, 63, 1005, 63, 449, 1105, 1, 455, 4,
                                        439, 1001, 64, 1, 64, 1002, 64, 2, 64, 109, -19, 1202, 8, 1, 63, 1008, 63, 38,
                                        63, 1005, 63, 479, 1001, 64, 1, 64, 1105, 1, 481, 4, 461, 1002, 64, 2, 64, 109,
                                        14, 2107, 25, 0, 63, 1005, 63, 497, 1105, 1, 503, 4, 487, 1001, 64, 1, 64, 1002,
                                        64, 2, 64, 109, 24, 2106, 0, -3, 4, 509, 1001, 64, 1, 64, 1105, 1, 521, 1002,
                                        64, 2, 64, 109, -20, 1208, -2, 37, 63, 1005, 63, 543, 4, 527, 1001, 64, 1, 64,
                                        1106, 0, 543, 1002, 64, 2, 64, 109, 7, 21102, 41, 1, 0, 1008, 1018, 43, 63,
                                        1005, 63, 563, 1105, 1, 569, 4, 549, 1001, 64, 1, 64, 1002, 64, 2, 64, 109, -7,
                                        1205, 10, 587, 4, 575, 1001, 64, 1, 64, 1106, 0, 587, 1002, 64, 2, 64, 109, -11,
                                        1202, 5, 1, 63, 1008, 63, 30, 63, 1005, 63, 609, 4, 593, 1106, 0, 613, 1001, 64,
                                        1, 64, 1002, 64, 2, 64, 109, 4, 1201, 5, 0, 63, 1008, 63, 34, 63, 1005, 63, 637,
                                        1001, 64, 1, 64, 1105, 1, 639, 4, 619, 1002, 64, 2, 64, 109, 12, 1206, 5, 651,
                                        1105, 1, 657, 4, 645, 1001, 64, 1, 64, 1002, 64, 2, 64, 109, 9, 21101, 42, 0,
                                        -7, 1008, 1018, 39, 63, 1005, 63, 677, 1105, 1, 683, 4, 663, 1001, 64, 1, 64,
                                        1002, 64, 2, 64, 109, -2, 21101, 43, 0, -8, 1008, 1015, 43, 63, 1005, 63, 705,
                                        4, 689, 1106, 0, 709, 1001, 64, 1, 64, 1002, 64, 2, 64, 109, -25, 2107, 38, 10,
                                        63, 1005, 63, 727, 4, 715, 1106, 0, 731, 1001, 64, 1, 64, 1002, 64, 2, 64, 109,
                                        7, 2102, 1, 2, 63, 1008, 63, 24, 63, 1005, 63, 757, 4, 737, 1001, 64, 1, 64,
                                        1105, 1, 757, 1002, 64, 2, 64, 109, -13, 1201, 10, 0, 63, 1008, 63, 29, 63,
                                        1005, 63, 779, 4, 763, 1105, 1, 783, 1001, 64, 1, 64, 1002, 64, 2, 64, 109, 30,
                                        21108, 44, 41, -3, 1005, 1019, 803, 1001, 64, 1, 64, 1106, 0, 805, 4, 789, 1002,
                                        64, 2, 64, 109, -2, 21102, 45, 1, -7, 1008, 1013, 45, 63, 1005, 63, 827, 4, 811,
                                        1105, 1, 831, 1001, 64, 1, 64, 1002, 64, 2, 64, 109, -16, 21107, 46, 47, 7,
                                        1005, 1011, 849, 4, 837, 1106, 0, 853, 1001, 64, 1, 64, 1002, 64, 2, 64, 109, 9,
                                        21108, 47, 47, 0, 1005, 1013, 875, 4, 859, 1001, 64, 1, 64, 1106, 0, 875, 1002,
                                        64, 2, 64, 109, -10, 2101, 0, 2, 63, 1008, 63, 30, 63, 1005, 63, 901, 4, 881,
                                        1001, 64, 1, 64, 1105, 1, 901, 4, 64, 99, 21102, 1, 27, 1, 21102, 1, 915, 0,
                                        1106, 0, 922, 21201, 1, 51805, 1, 204, 1, 99, 109, 3, 1207, -2, 3, 63, 1005, 63,
                                        964, 21201, -2, -1, 1, 21101, 942, 0, 0, 1106, 0, 922, 22101, 0, 1, -1, 21201,
                                        -2, -3, 1, 21101, 0, 957, 0, 1105, 1, 922, 22201, 1, -1, -2, 1105, 1, 968,
                                        21201, -2, 0, -2, 109, -3, 2105, 1, 0};

    struct Instruction {
        std::array<int64_t, 3> modes;
        int64_t op_code;

        static constexpr size_t MAX_OPCODE_LEN = 5;
        static constexpr std::array<int64_t, MAX_OPCODE_LEN> pow{1, 10, 100, 1000, 10000};

        static std::array<int64_t, MAX_OPCODE_LEN> getDigits(int64_t nr) {
            std::array<int64_t, MAX_OPCODE_LEN> digits{};
            size_t digit_index = 0;
            for (int64_t i = MAX_OPCODE_LEN - 1; i >= 0; i--) {
                int64_t div = nr / pow.at(i);
                digits.at(digit_index++) = div;
                nr -= div * pow.at(i);
            }
            return digits;
        }

        explicit Instruction(int64_t opcode) {
            const auto digits = getDigits(opcode);
            modes[0] = digits.at(2);
            modes[1] = digits.at(1);
            modes[2] = digits.at(0);
            op_code = digits.at(3) * 10 + digits.at(4);
        }
    };

    struct Image {
        std::vector<int64_t> memory;
        std::vector<int64_t> input;
        std::vector<int64_t> output;
        std::mutex input_mtx;
        bool block_on_missing_input = false;
        int64_t relative_base = 0;

        std::function<void(int64_t)> on_output = [this](int64_t value) {
            output.push_back(value);
        };

        void grow_memory(size_t times) {
            auto old_size = memory.size();
            memory.resize(old_size * times);
            std::fill(std::next(memory.begin(), old_size), memory.end(), 0);
        }

        void print_output() {
            std::cout << "<output size=" << output.size() << ">" << std::endl;
            for (auto o: output) {
                std::cout << o << " ";
            }
            std::cout << std::endl << "</output>" << std::endl;
        }

        std::function<std::optional<int64_t>()> on_input = [this]() {
            const std::lock_guard<std::mutex> lock(input_mtx);
            if (block_on_missing_input) {
                if (input.empty()) {
                    return std::optional<int64_t>{};
                }
            }
            assert(!input.empty());
            auto value = input.front();
            input.erase(input.begin());
            return std::make_optional(value);
        };

        int64_t read(int64_t mode, int64_t argument) const {
            if (mode == 0) {
                return memory.at(argument);
            } else if (mode == 1) {
                return argument;
            } else if (mode == 2) {
                int64_t offset = relative_base + argument;
                assert(offset >= 0);
                return memory.at(offset);
            } else {
                assert(false);
            }
        }

        void write(int64_t mode, int64_t argument, int64_t value) {
            if (mode == 0) {
                memory.at(argument) = value;
            } else if (mode == 2) {
                int64_t offset = relative_base + argument;
                assert(offset >= 0);
                memory.at(offset) = value;
            } else {
                assert(false);
            }
        }

        void loop() {
            size_t index = 0;
            std::array<int64_t, 3> args{};
            while (true) {
                const Instruction instruction(memory.at(index++));
                auto fetchArgs = [&](size_t how_many) {
                    for (size_t idx = 0; idx < how_many; idx++) {
                        args.at(idx) = memory.at(index++);
                    }
                    for (size_t idx = how_many; idx < args.size(); idx++) {
                        args.at(idx) = std::numeric_limits<int64_t>::min();
                    }
                };
                auto readArg = [&](size_t idx) {
                    assert(args.at(idx) != std::numeric_limits<int64_t>::min());
                    return read(instruction.modes.at(idx), args.at(idx));
                };
                auto writeArg = [&](size_t idx, int64_t value) {
                    assert(args.at(idx) != std::numeric_limits<int64_t>::min());
                    return write(instruction.modes.at(idx), args.at(idx), value);
                };

                switch (instruction.op_code) {
                    case 1:
                        fetchArgs(3);
                        writeArg(2, readArg(0) + readArg(1));
                        break;
                    case 2:
                        fetchArgs(3);
                        writeArg(2, readArg(0) * readArg(1));
                        break;
                    case 3:
                        fetchArgs(1);
                        if (auto maybe_input = on_input()) {
                            writeArg(0, *maybe_input);
                        } else {
                            // block on missing input
                            index -= 2;
                        }
                        break;
                    case 4:
                        fetchArgs(1);
                        on_output(readArg(0));
                        break;
                    case 5: // jump-if-true
                        fetchArgs(2);
                        if (readArg(0) != 0) {
                            index = readArg(1);
                        }
                        break;
                    case 6: // jump-if-false
                        fetchArgs(2);
                        if (readArg(0) == 0) {
                            index = readArg(1);
                        }
                        break;
                    case 7: // less than
                        fetchArgs(3);
                        writeArg(2, readArg(0) < readArg(1));
                        break;
                    case 8: // equals
                        fetchArgs(3);
                        writeArg(2, readArg(0) == readArg(1));
                        break;
                    case 9:
                        fetchArgs(1);
                        relative_base += readArg(0);
                        break;
                    case 99:
                        return;
                }
            }
        }
    };
}

int _9() {
    // old tests
    {
        Image image;
        image.memory = {1, 0, 0, 3, 1, 1, 2, 3, 1, 3, 4, 3, 1, 5, 0, 3, 2, 1, 6, 19, 1, 5, 19, 23, 1,
                        23, 6, 27, 1, 5, 27, 31, 1, 31, 6, 35, 1, 9, 35, 39, 2, 10, 39, 43, 1, 43, 6,
                        47, 2, 6, 47, 51, 1, 5, 51, 55, 1, 55, 13, 59, 1, 59, 10, 63, 2, 10, 63, 67, 1,
                        9, 67, 71, 2, 6, 71, 75, 1, 5, 75, 79, 2, 79, 13, 83, 1, 83, 5, 87, 1, 87, 9,
                        91, 1, 5, 91, 95, 1, 5, 95, 99, 1, 99, 13, 103, 1, 10, 103, 107, 1, 107, 9, 111,
                        1, 6, 111, 115, 2, 115, 13, 119, 1, 10, 119, 123, 2, 123, 6, 127, 1, 5, 127,
                        131, 1, 5, 131, 135, 1, 135, 6, 139, 2, 139, 10, 143, 2, 143, 9, 147, 1, 147, 6,
                        151, 1, 151, 13, 155, 2, 155, 9, 159, 1, 6, 159, 163, 1, 5, 163, 167, 1, 5, 167,
                        171, 1, 10, 171, 175, 1, 13, 175, 179, 1, 179, 2, 183, 1, 9, 183, 0, 99, 2, 14,
                        0, 0};
        image.memory[1] = 12;
        image.memory[2] = 2;
        image.loop();
        ASSERT_EQ(image.memory[0], 4023471);
    }
    {
        // day5 part1
        Image image;
        image.input = {1};
        image.memory = {3, 225, 1, 225, 6, 6, 1100, 1, 238, 225, 104, 0, 1101, 81, 30, 225, 1102, 9,
                        63,
                        225, 1001, 92, 45, 224, 101, -83, 224, 224, 4, 224, 102, 8, 223, 223, 101, 2,
                        224,
                        224, 1, 224, 223, 223, 1102, 41, 38, 225, 1002, 165, 73, 224, 101, -2920, 224,
                        224,
                        4, 224, 102, 8, 223, 223, 101, 4, 224, 224, 1, 223, 224, 223, 1101, 18, 14,
                        224,
                        1001, 224, -32, 224, 4, 224, 1002, 223, 8, 223, 101, 3, 224, 224, 1, 224, 223,
                        223,
                        1101, 67, 38, 225, 1102, 54, 62, 224, 1001, 224, -3348, 224, 4, 224, 1002, 223,
                        8,
                        223, 1001, 224, 1, 224, 1, 224, 223, 223, 1, 161, 169, 224, 101, -62, 224, 224,
                        4,
                        224, 1002, 223, 8, 223, 101, 1, 224, 224, 1, 223, 224, 223, 2, 14, 18, 224,
                        1001,
                        224, -1890, 224, 4, 224, 1002, 223, 8, 223, 101, 3, 224, 224, 1, 223, 224, 223,
                        1101, 20, 25, 225, 1102, 40, 11, 225, 1102, 42, 58, 225, 101, 76, 217, 224,
                        101,
                        -153, 224, 224, 4, 224, 102, 8, 223, 223, 1001, 224, 5, 224, 1, 224, 223, 223,
                        102,
                        11, 43, 224, 1001, 224, -451, 224, 4, 224, 1002, 223, 8, 223, 101, 6, 224, 224,
                        1,
                        223, 224, 223, 1102, 77, 23, 225, 4, 223, 99, 0, 0, 0, 677, 0, 0, 0, 0, 0, 0,
                        0, 0,
                        0, 0, 0, 1105, 0, 99999, 1105, 227, 247, 1105, 1, 99999, 1005, 227, 99999,
                        1005, 0,
                        256, 1105, 1, 99999, 1106, 227, 99999, 1106, 0, 265, 1105, 1, 99999, 1006, 0,
                        99999, 1006, 227, 274, 1105, 1, 99999, 1105, 1, 280, 1105, 1, 99999, 1, 225,
                        225,
                        225, 1101, 294, 0, 0, 105, 1, 0, 1105, 1, 99999, 1106, 0, 300, 1105, 1, 99999,
                        1,
                        225, 225, 225, 1101, 314, 0, 0, 106, 0, 0, 1105, 1, 99999, 8, 226, 677, 224,
                        1002,
                        223, 2, 223, 1006, 224, 329, 1001, 223, 1, 223, 7, 226, 226, 224, 102, 2, 223,
                        223,
                        1006, 224, 344, 101, 1, 223, 223, 108, 677, 677, 224, 1002, 223, 2, 223, 1006,
                        224,
                        359, 101, 1, 223, 223, 1107, 226, 677, 224, 1002, 223, 2, 223, 1005, 224, 374,
                        101,
                        1, 223, 223, 1008, 677, 226, 224, 1002, 223, 2, 223, 1005, 224, 389, 101, 1,
                        223,
                        223, 1007, 677, 226, 224, 1002, 223, 2, 223, 1005, 224, 404, 1001, 223, 1, 223,
                        1107, 677, 226, 224, 1002, 223, 2, 223, 1005, 224, 419, 1001, 223, 1, 223, 108,
                        677, 226, 224, 102, 2, 223, 223, 1006, 224, 434, 1001, 223, 1, 223, 7, 226,
                        677,
                        224, 102, 2, 223, 223, 1005, 224, 449, 1001, 223, 1, 223, 107, 226, 226, 224,
                        102,
                        2, 223, 223, 1006, 224, 464, 101, 1, 223, 223, 107, 677, 226, 224, 102, 2, 223,
                        223, 1006, 224, 479, 101, 1, 223, 223, 1007, 677, 677, 224, 1002, 223, 2, 223,
                        1006, 224, 494, 1001, 223, 1, 223, 1008, 226, 226, 224, 1002, 223, 2, 223,
                        1006,
                        224, 509, 101, 1, 223, 223, 7, 677, 226, 224, 1002, 223, 2, 223, 1006, 224,
                        524,
                        1001, 223, 1, 223, 1007, 226, 226, 224, 102, 2, 223, 223, 1006, 224, 539, 101,
                        1,
                        223, 223, 8, 677, 226, 224, 1002, 223, 2, 223, 1006, 224, 554, 101, 1, 223,
                        223,
                        1008, 677, 677, 224, 102, 2, 223, 223, 1006, 224, 569, 101, 1, 223, 223, 1108,
                        677,
                        226, 224, 102, 2, 223, 223, 1005, 224, 584, 101, 1, 223, 223, 107, 677, 677,
                        224,
                        102, 2, 223, 223, 1006, 224, 599, 1001, 223, 1, 223, 1108, 677, 677, 224, 1002,
                        223, 2, 223, 1006, 224, 614, 1001, 223, 1, 223, 1107, 677, 677, 224, 1002, 223,
                        2,
                        223, 1005, 224, 629, 1001, 223, 1, 223, 108, 226, 226, 224, 1002, 223, 2, 223,
                        1005, 224, 644, 101, 1, 223, 223, 8, 226, 226, 224, 1002, 223, 2, 223, 1005,
                        224,
                        659, 101, 1, 223, 223, 1108, 226, 677, 224, 1002, 223, 2, 223, 1006, 224, 674,
                        101,
                        1, 223, 223, 4, 223, 99, 226};
        image.loop();
        ASSERT_EQ(image.output.back(), 5346030);
    }
    {
        Image image;
        image.input = {3};
        image.memory = {3, 21, 1008, 21, 8, 20, 1005, 20, 22, 107, 8, 21, 20, 1006, 20, 31,
                        1106, 0, 36, 98, 0, 0, 1002, 21, 125, 20, 4, 20, 1105, 1, 46, 104,
                        999, 1105, 1, 46, 1101, 1000, 1, 20, 4, 20, 1105, 1, 46, 98, 99};;
        image.loop();
        ASSERT_EQ(image.output.back(), 999);
    }
    {
        Image image;
        image.input = {8};
        image.memory = {3, 21, 1008, 21, 8, 20, 1005, 20, 22, 107, 8, 21, 20, 1006, 20, 31,
                        1106, 0, 36, 98, 0, 0, 1002, 21, 125, 20, 4, 20, 1105, 1, 46, 104,
                        999, 1105, 1, 46, 1101, 1000, 1, 20, 4, 20, 1105, 1, 46, 98, 99};
        image.loop();
        ASSERT_EQ(image.output.back(), 1000);
    }
    {
        Image image;
        image.input = {9};
        image.memory = {3, 21, 1008, 21, 8, 20, 1005, 20, 22, 107, 8, 21, 20, 1006, 20, 31,
                        1106, 0, 36, 98, 0, 0, 1002, 21, 125, 20, 4, 20, 1105, 1, 46, 104,
                        999, 1105, 1, 46, 1101, 1000, 1, 20, 4, 20, 1105, 1, 46, 98, 99};
        image.loop();
        ASSERT_EQ(image.output.back(), 1001);
    }
    {
        // day5 part2
        Image image;
        image.input = {5};
        image.memory = {3, 225, 1, 225, 6, 6, 1100, 1, 238, 225, 104, 0, 1101, 81, 30, 225, 1102, 9,
                        63,
                        225, 1001, 92, 45, 224, 101, -83, 224, 224, 4, 224, 102, 8, 223, 223, 101, 2,
                        224,
                        224, 1, 224, 223, 223, 1102, 41, 38, 225, 1002, 165, 73, 224, 101, -2920, 224,
                        224,
                        4, 224, 102, 8, 223, 223, 101, 4, 224, 224, 1, 223, 224, 223, 1101, 18, 14,
                        224,
                        1001, 224, -32, 224, 4, 224, 1002, 223, 8, 223, 101, 3, 224, 224, 1, 224, 223,
                        223,
                        1101, 67, 38, 225, 1102, 54, 62, 224, 1001, 224, -3348, 224, 4, 224, 1002, 223,
                        8,
                        223, 1001, 224, 1, 224, 1, 224, 223, 223, 1, 161, 169, 224, 101, -62, 224, 224,
                        4,
                        224, 1002, 223, 8, 223, 101, 1, 224, 224, 1, 223, 224, 223, 2, 14, 18, 224,
                        1001,
                        224, -1890, 224, 4, 224, 1002, 223, 8, 223, 101, 3, 224, 224, 1, 223, 224, 223,
                        1101, 20, 25, 225, 1102, 40, 11, 225, 1102, 42, 58, 225, 101, 76, 217, 224,
                        101,
                        -153, 224, 224, 4, 224, 102, 8, 223, 223, 1001, 224, 5, 224, 1, 224, 223, 223,
                        102,
                        11, 43, 224, 1001, 224, -451, 224, 4, 224, 1002, 223, 8, 223, 101, 6, 224, 224,
                        1,
                        223, 224, 223, 1102, 77, 23, 225, 4, 223, 99, 0, 0, 0, 677, 0, 0, 0, 0, 0, 0,
                        0, 0,
                        0, 0, 0, 1105, 0, 99999, 1105, 227, 247, 1105, 1, 99999, 1005, 227, 99999,
                        1005, 0,
                        256, 1105, 1, 99999, 1106, 227, 99999, 1106, 0, 265, 1105, 1, 99999, 1006, 0,
                        99999, 1006, 227, 274, 1105, 1, 99999, 1105, 1, 280, 1105, 1, 99999, 1, 225,
                        225,
                        225, 1101, 294, 0, 0, 105, 1, 0, 1105, 1, 99999, 1106, 0, 300, 1105, 1, 99999,
                        1,
                        225, 225, 225, 1101, 314, 0, 0, 106, 0, 0, 1105, 1, 99999, 8, 226, 677, 224,
                        1002,
                        223, 2, 223, 1006, 224, 329, 1001, 223, 1, 223, 7, 226, 226, 224, 102, 2, 223,
                        223,
                        1006, 224, 344, 101, 1, 223, 223, 108, 677, 677, 224, 1002, 223, 2, 223, 1006,
                        224,
                        359, 101, 1, 223, 223, 1107, 226, 677, 224, 1002, 223, 2, 223, 1005, 224, 374,
                        101,
                        1, 223, 223, 1008, 677, 226, 224, 1002, 223, 2, 223, 1005, 224, 389, 101, 1,
                        223,
                        223, 1007, 677, 226, 224, 1002, 223, 2, 223, 1005, 224, 404, 1001, 223, 1, 223,
                        1107, 677, 226, 224, 1002, 223, 2, 223, 1005, 224, 419, 1001, 223, 1, 223, 108,
                        677, 226, 224, 102, 2, 223, 223, 1006, 224, 434, 1001, 223, 1, 223, 7, 226,
                        677,
                        224, 102, 2, 223, 223, 1005, 224, 449, 1001, 223, 1, 223, 107, 226, 226, 224,
                        102,
                        2, 223, 223, 1006, 224, 464, 101, 1, 223, 223, 107, 677, 226, 224, 102, 2, 223,
                        223, 1006, 224, 479, 101, 1, 223, 223, 1007, 677, 677, 224, 1002, 223, 2, 223,
                        1006, 224, 494, 1001, 223, 1, 223, 1008, 226, 226, 224, 1002, 223, 2, 223,
                        1006,
                        224, 509, 101, 1, 223, 223, 7, 677, 226, 224, 1002, 223, 2, 223, 1006, 224,
                        524,
                        1001, 223, 1, 223, 1007, 226, 226, 224, 102, 2, 223, 223, 1006, 224, 539, 101,
                        1,
                        223, 223, 8, 677, 226, 224, 1002, 223, 2, 223, 1006, 224, 554, 101, 1, 223,
                        223,
                        1008, 677, 677, 224, 102, 2, 223, 223, 1006, 224, 569, 101, 1, 223, 223, 1108,
                        677,
                        226, 224, 102, 2, 223, 223, 1005, 224, 584, 101, 1, 223, 223, 107, 677, 677,
                        224,
                        102, 2, 223, 223, 1006, 224, 599, 1001, 223, 1, 223, 1108, 677, 677, 224, 1002,
                        223, 2, 223, 1006, 224, 614, 1001, 223, 1, 223, 1107, 677, 677, 224, 1002, 223,
                        2,
                        223, 1005, 224, 629, 1001, 223, 1, 223, 108, 226, 226, 224, 1002, 223, 2, 223,
                        1005, 224, 644, 101, 1, 223, 223, 8, 226, 226, 224, 1002, 223, 2, 223, 1005,
                        224,
                        659, 101, 1, 223, 223, 1108, 226, 677, 224, 1002, 223, 2, 223, 1006, 224, 674,
                        101,
                        1, 223, 223, 4, 223, 99, 226};
        image.loop();
        ASSERT_EQ(image.output.back(), 513116);
    }
    // new tests
    {
        std::vector<int64_t> self = {109, 1, 204, -1, 1001, 100, 1, 100, 1008, 100, 16, 101, 1006, 101, 0, 99};
        Image image;
        image.memory = self;
        image.grow_memory(10);
        image.loop();
        assert(self == image.output);
    }
    {
        Image image;
        image.memory = {1102, 34915192, 34915192, 7, 4, 7, 99, 0};
        image.grow_memory(10);
        image.loop();
        ASSERT_EQ(image.output.at(0), 1219070632396864);
    }
    // part 1
    {
        Image image;
        image.input = {1};
        image.memory = input_day_9;
        image.grow_memory(10);
        image.loop();
        ASSERT_EQ(image.output.at(0), 2351176124);
    }
    // part 2
    {
        Image image;
        image.input = {2};
        image.memory = input_day_9;
        image.grow_memory(10);
        image.loop();
        ASSERT_EQ(image.output.at(0), 73110);
    }
    return 0;
}
